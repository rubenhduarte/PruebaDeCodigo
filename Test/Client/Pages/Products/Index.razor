@page "/product"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization
@using Test.Client.Interfaces;
@using Test.Client.Services;
@using Test.Shared.Entities.DataBase;
@using Test.Shared.Entities;
@inject IProductServices productServices
@inject NavigationManager NavigationManager
@inject IModalService modal
<div class="container">

    <MudText Typo="Typo.h3" class="p-3 text-center">Productos</MudText>
    <hr class="w-100" />
    <div class="m-3">
        <AuthorizeView>
            <Authorized>

                <div class="w-100">
                    <div class="w-100">
                        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Class="float-end" OnClick="async ()=>await OpenProductModal(null)" />
                    </div>
                    <div class="w-100">
                        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.PictureAsPdf" OnClick="async ()=>await ExportToPdf()" />
                    </div>    

                    <hr />
                    <MudDataGrid Items="@productList" Filterable="false" SortMode="@SortMode.None" Groupable="false">
                        <Columns>
                            <PropertyColumn Property="x => x.Name" Title="Nombre y modelo">

                                <CellTemplate Context="ctx">
                                    <MudStack Row>

                                        <MudIcon Icon="@Icons.Material.Filled.Shield" Size=Size.Medium Title="Name and model" />

                                        <div class="row">
                                            <div class="row">
                                                <MudText Typo="Typo.h4">@ctx.Item.Name</MudText>
                                            </div>
                                            <div class="d-flex flex-wrap align-items-center">
                                                <MudText Typo="Typo.caption" Class="me-2">Model: </MudText>
                                                <MudText Typo="Typo.h6"> @ctx.Item.Model</MudText>
                                            </div>
                                        </div>

                                    </MudStack>
                                </CellTemplate>


                            </PropertyColumn>
                            <PropertyColumn Property="x => x.Price">
                                    <TemplateColumn CellClass="d-flex justify-end">
                                        <CellTemplate Context="ctx">
                                            <MudStack Row>
                                                <MudIcon Icon="@Icons.Material.Filled.Money" Title="Precio" />
                                            <MudText Typo="Typo.h4"> @ctx.Item.Price</MudText>
                                            </MudStack>
                                        </CellTemplate>
                                    </TemplateColumn>
                            </PropertyColumn>
                                <PropertyColumn Property="x => x.Description">
                                    <TemplateColumn CellClass="d-flex justify-end">
                                        <CellTemplate Context="ctx">
                                            <MudStack Row>
                                                <MudIcon Icon="@Icons.Material.Filled.AttachFile" Title="Foto" />

                                            </MudStack>
                                        </CellTemplate>
                                    </TemplateColumn>
                            </PropertyColumn>
                                <TemplateColumn CellClass="d-flex justify-end">
                                    <CellTemplate Context="ctx">
                                        <MudStack Row>
                                            @*                                 <MudRating Size="@Size.Small" SelectedValue="@context.Item.Rating" />
                                            <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">Hire</MudButton>*@
                                        <MudFab Color="Color.Warning" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" @onclick="@(() => NavigationManager.NavigateTo($"product/NewOrEdit/{ctx.Item.Id}"))" />
                                        <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.DeleteForever" Size="Size.Small" @onclick="@(() => DeleteProduct(ctx.Item.Id))" />
                                        </MudStack>
                                    </CellTemplate>
                                </TemplateColumn>
                        </Columns>
                    </MudDataGrid>
                </div>
            </Authorized>
            <NotAuthorized>
                <Unauthorized></Unauthorized>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>



@code {
    Product productItem { get; set; } = new Product();
    public List<Product> productList { get; set; } = new List<Product>();

    protected override async Task OnInitializedAsync()
    {
        await GetProductList();

    }
    async Task OnProductChangedCallback(object? product)
    {

    }
    public async Task GetProductList()
    {
        productList.Clear();
        var productItems = await productServices.GetAllProduct();
        foreach (var item in productItems)
        {
            productList.Add(item);
        }
    }
    public async Task DeleteProduct(string id)
    {
        AppResult appResult = new AppResult();
        var result = await productServices.DeleteProduct(id);
        try
        {
            if (result != null)
            {
                Console.WriteLine("Producto eliminado");
                await GetProductList();
                //
                StateHasChanged();

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Product is not deleted" + ex);
        }
    }

    async Task OpenProductModal(string id)
    {
        NavigationManager.NavigateTo($"product/NewOrEdit/{id}");
    }

    async Task ExportToPdf()
    { 
        NavigationManager.NavigateTo($"product/ExportToPdf/");
    }
}