@page "/product/ExportToPdf"
@using Test.Client.Interfaces
@using Test.Shared.Entities.DataBase
@inject NavigationManager NavigationManager
@inject IProductServices productServices
@inject IJSRuntime JSRuntime



<div class="container">

    <MudText Typo="Typo.h3" class="p-3 text-center">Exportar productos a PDF</MudText>
        <div class="container-fluid ">
            <MudCard class="p-4">
                <MudTextField @bind-Value="nombreArchivo" Label="Nombre de Archivo" Required="true"/>

                <div class="mud-spacing">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@string.IsNullOrEmpty(nombreArchivo)" @onclick="Exportar">Exportar</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="Volver">Volver</MudButton>
                </div>
            </MudCard>
        </div>
</div>


@code {
    private string nombreArchivo;

    private async Task Exportar()
    {
        var allProducts = await productServices.GetAllProduct();
        if (allProducts != null && allProducts.Any())
        //var tempo = productServices.ExportToPdf(this.nombreArchivo);
        //if (!string.IsNullOrEmpty(nombreArchivo))
        {
            // Llama al servicio para obtener los bytes del archivo PDF
            byte[] pdfBytes = await productServices.ExportToPdf(nombreArchivo, allProducts);

            // Verifica si se obtuvieron los bytes del PDF
             if (pdfBytes != null && pdfBytes.Length > 0)
             {
                 // Crea un enlace de descarga en el navegador para el archivo PDF
                 await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", new
                 {
                     ByteArray = pdfBytes,
                     FileName = $"{nombreArchivo}.pdf"
                 });
             }

            // if (pdfBytes != null && pdfBytes.Length > 0)
            // {
                
            //     await JSRuntime.InvokeVoidAsync("GenerarPDF",pdfBytes);
            // }

        }
         
    }
    private void Volver()
    {
        NavigationManager.NavigateTo($"product/");
    }
}
<script>
    window.BlazorDownloadFile = async(data) => {
        const byteArray = new Uint8Array(data.ByteArray);
        const blob = new Blob([byteArray], { type: 'application/pdf' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = data.FileName;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
    };
</script>
